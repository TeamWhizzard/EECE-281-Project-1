EECE 281 Section 202
Project 1
Lab section: L2D
Group #: L2D_7A, L2D_7B
Group’s Lab-Bench #s: 7A and 7B

Student names, numbers and contribution percentages:    
Name				Student ID		Contribution Percentage
Diksha Bansal		 45000122
Anthony Chui		
John Deppe			
Logan Gilmore		
Theresa Mammarella	45578127	
Steven Olsen		

This document serves as a complete documentation of the circuitry and functionality of the project. The project report should have sufficient detail that someone skilled in the art could reproduce or improve upon your results. Include component numbers and info, values, block diagrams, schematics, overall and detailed explanation, comments, … when necessary.
You may only include code segments in the report whenever needed for explanations. As usual you will need to submit the complete code file separately, and also to include the complete code as an appendix to this report. The code must include sufficient comments for documentation.
The number of pages for the report should be less than 10 (not including appendices), double (or 1.5) spaced, ‘Arial’ or ‘Times New Roman’ font size 11 for text, and ‘Courier New’ font size 8 or 10 for the source code, approximately one inch margin for the top, bottom, left, and right margins. It should include the following sections.
It should include the course name and number, lab section, group and bench numbers, project name, student names, and student numbers. The title page should also include an estimated percentage of participation of each group member in the project.


Table of Contents
------------------------
1. Contributions
2. Introduction and motivations
3. Project Description
4. Conclusions
5. References and bibliography
6. Appendix A
7. Appendix B


Contributions
------------------
List and explain the contribution percentage of each team member, as well as the description of the task(s) each member worked on and completed. The sum of the individual percentages must add up to 100%. Ideally, group members should have equal participation in the project.
This estimate declaration (among other assessing points for contribution) will be used to scale the project mark to each group member. For example, assume that the estimated percentage is: Pedro 30%, John 20%, and Nancy 50% for a three-person group and the project mark is 14 out of 20, the marks will be Pedro =0.30*(14*3) = 12.6, John =0.20*(14*3) = 8.4, and Nancy=0.50*(14*3) = 20 (The mark caps at the max project grade).


Introduction and motivations
--------------------------------------
In this project, we were asked to build a marketable autonomous robot that is at the very least, capable of moving straightforward at its maximum speed until it detects an object, and then decelerates gradually. It should get as close as possible to the object without hitting it. 

The remote controlled cars available in the market was our inspiration. With everything becoming wireless these days, we decided to use Bluetooth to connect the robot to the hand  held controller.  
(Include design objective and specifications. 
Also Include the list and description of the files submitted for this lab (including code and Fritzing breadboard schematics))


Project Description 
--------------------------
(This section is the main part of your project report and should have sub-headings.
Include summary of each part of and the complete lab experiment. Overview of the overall design approach including system block diagrams for both the hardware and software designs. 
Explain the design, and implementation procedures. During the lab if you selected a method over the others for any step, describe the second best alternative you considered.
Explain the evaluation/testing procedure and results. Include the problems you encounter and how to resolve them, as well as best practices you learned.)

--Planning and Preliminary steps--
This was the first project of the course to use all six team members in collaboration.  Recognizing that this might present organizational and design challenges, we spent a large portion of our first meetup in front of a whiteboard planning our robot's design, as well as a tentative timeline for the project.

The planning session was helpful to get the team thinking on a similar approach, however our final design is considerably different from the original sketch because of our limited Arduino and motor knowledge.

One of the most effective strategies we came up with during this meeting was to keep a common pin map document on GitHub for each Arduino, which was useful when the robot and controller were passed between team members.

--DFRobot Motor--
Having not had much exposure to working with motors in 281, the group decided it would be best to prioritize getting that portion of the robot to work correctly, as well as conduct research on the Arduino Motor Shield.

We connected the motors up to a voltage source to test its limitations.  After reaching about 36 V, the motor began to smoke!  It was later discovered that the motor was infact limited to a 6V power source.

Besides an increased knowledge of functionality, studying the datasheet of the (chip name) used to control the Arduino motor shield proved useful in that we discovered two pins that could provide us with current readings across each connected motor.  We reasoned that if sensitive enough, this information could be used to corrent any current spikes or discrepencies on the motors that were causing the robot not to drive straight.  This pin however was not one that was already wired up to an Arduino pin.  We tried to unsolder the pins and connect them to jumper cables to be accessed by digital Arudino pins, however the chip's pin broke in the process, and was unrecoverable.  Unfortunatly for us, that particular pin needed to be grounded for the motor to work properly.

We ended up purchasing a Pololu motor shield that is compatible with the Arduino uno as a replacement, since there were no other replacement parts available in Vancouver.  The Pololu shield is more powerful than the previous Arduino shield.  (Elaborate on additional differences of the shields)  One of its additional features was that the motor current pins were already wired.  Once we were able to test this feature however, we concluded that it was not sensitive enough to be used for anything other than detecting current spikes if the robot crashed.

--Power Supply--
Another priority was figuring out the best way to power the robot.  We decided to use only one power supply to power the motors and robot Arduino.  It is a common practice in such applications to use seperate power sources for motor and microcontroller to eliminate extraneous motor noise that could effect the microcontroller's functionality.  We rationalized that this was unnecessary because the Arduino Uno has a built-in device to reduce noise from an incomming power supply.  To further reduce motor nosie, we connected (size) capacitors in parallel with each motor as suggested in Pololu motor shield tutorials.

Upon testing our original power supply setup, we found smoke coming our of the batteries!  We quickly shut off the power switch and after consulting a lab TA, realized we had connected the power switch up wrong and were short circuiting the batteries.  The recharchable batteries survived, but the battery pack was fried.


--Connectivity--
Bluetooth communiation was more difficult than originally anticipated. The process would require two bluetooth modules-- a master and slave. The Arudino TX/RX pin connects to the reversed RX/TX pin of the bluetooth module. This is because the Arduino is receiving the data sent by the bluetooth module and vice versa. So overall connectivity seemed simple enough. It wasn't.

First, the bluetooth RX pin can only accept 3.3V and Arduino pins output 5V, so a voltage divider was required. Uploading to the Arduino requires that pins 0 and 1 not be connected on upload as these pins are shared with USB. To simplify these restrictions, the best solution was to use the prototype shields in our kit. We would then install pin headers and voltage dividers onto the shield. This solution allowed us to quickly connect/disconnect the module when uploading new code or testing that code.

Our adventures in Bluetooth connectivity did not end there. A one time event to program the master bluetooth module was required so it would only connect, and automatically connect, to the slave module. It required setting the master module into command mode to be programmed. Further complicating matters, this pin was not soldered. We soldered a wire from the breakout board to 3.3V. On power up, setting that pin high sets the master into command mode. In command mode we sent the required AT commands to the master module. The commands set permanent memory to point to the address of the slave module. Thus, on power up, the master module would only seek out the slave and connect to it automatically.


--Controller--
As a second functionality, we decided to build a remote controller for the robot.

The controller would have an accelerometer and gyroscope mounted on an Arduino Uno so that it could detect thrust and tilt and send a signal to the robot appropriately. For the bulk of our commands, which is turning, we decided to use the gyroscope to determine the direction of the robot. Tilting the controller left, for example, will cause the robot to turn left for as long as the left position is held. In order to maintain the state of our controller, we needed to keep track of the degrees in which the controller turned. Zero degrees is calibrated to the position of the gyroscope on setup.

One particular problem with obtaining degrees turned was that the gyroscope returns data in degrees per second. To calculate degrees, the data must be integrated with respect to time. Since there is no function that models random, real data, we use a form of approximate integration to obtain total degrees turned. By simply summing up (degrees per second * read delay duration), a close reading of degrees can reliably be achieved. We use this degrees value to determine whether the state is in the left, center or right boundary (i.e -20 to 20 degrees is defined as the center). 

However, errors began to build up in the angle summation and eventually cause the center line to be misaligned. Using the accelerometer to compute the angle in addition to the gyroscope solved this problem. Using 3D trigonometry and the projection of the gravity vector onto the axises, another angle of rotation is achieved. This angle is reliable in the long term as opposed to the gyroscope integration requirements, since its angle is continuously recalculated from acceleration rather than summing up previous measurements. 

Combining both the gyroscope and accelerometer angle measurements into what's known as a complimentary filter essentially takes the best of both worlds. Although the measurements may not always record a perfect 90 when its physically tilted as such, the fact that the angle readings are consistent independent of speed or time, makes this design choice the best method to record the angle of rotation. Ultimately, the design of our controller is very responsive, and is rather similar to the likes
of a Wii-Mote.

Our overall theme for the project was Pacman, and since the robot is modelled after a ghost we made the controller into Pacman himself.  Being a spherical shape, we decided that mounting the hardware inside of a hamster ball would be the best option in terms of component accessability as well as protection.

The first step was to split the ball in half with an exacto knife.  We fixed the metal sensor mount that came with the robot kit inside the ball as a shelf.  The Arduino was secured onto the shelf in such a way that the accelerometer/ gyroscope was as close to center of the ball as possible.  The battery is on the other side of the sensor mount and positioned so that the hamster port can be unscrewed for optimal battery accessability.  One issue we ran into was not having enough room to fit the USB cable in for uploading/ testing code.  We fixed this by cutting a hole in the side of the ball.

To make sure there were as few controller parts as possible, all components are neatly soldered onto the Arduino prototyping shield including the Bluetooth master, piezo buzzers, voltage dividers for Bluetooth and lcd, and accelerometer/ gyroscope.

We mounted the LCD display on the upper half of the hamster ball, and made the decision to splice a prototyping wire together to connect the three grounds of the lcd display to make wiring easier. Since the ball is transparent we left this section of the hamster ball uncovered by felt so the lcd could be seen.  We decided against having the LCD display protrude from a hole in the hamster ball so it would be better protected from drops.

--Encoder--
About a week into the process, we realized the car wouldnt go straight because of motor discrepencies.  Tried to use a magic number but the problem wasnt consistent (include picture of testing).  Decided the best solution would be to build an encoder.
more about encoders..

(john talk about building encoders)

We bought pre-made DFrobot encoders to model off of/ test/ just in case and ended up installing them on the robot and using them for stuff..
(discuss coding with interupts ect)

One of our team members bought arudino romeo for fun.  Because the pololu shielf was using one of two interrupt pins on the arduino uno, we decided to use the romeo on our board instead

--Additional Functionalities and Considerations--
-Double Arduino-
During our initial planning we wanted to use two of our three arduinos on the robot to utilize its extra pin space.  After researching the master-slave relationship ect, we decided using an extra arduino just for the sake of extra pins was not a very good reason, and adjusted the design accordingly.

-LCD I2C adapter-
One of the ways we decreased pin usage was finding an adapter that reduced the 8 pins used by the lcd display to two serial pins.  We attached the lcd to the adapter by soldering each of them to a common piece of prototyping bored.  Elaborate on coding ect..

-Temperature and Humidity sensor-
decided to mount the temp/ humidity sensor to the board so we could factor in both humidity and temperature into our speed of sound calculations to increase the acccuracy of the distance calculations from the ultrasonic sensor.  Concluded that an excessive use of constants (ie heat capacities with limited accuracy would probably end up making little difference in the speed of sound calculation, 0.1 to 0.6% as read, or potentially worsen the results.  Went back to only using the room's temperature.  (For another reason, the blue sensor is a bit farther away from the board than the little lm35 guy would be therefore less likely to pick up heat from other components?)

-double piezo buzzers-
stereo
To go along with the theme we wanted use two piezo buzzers to play an elaborate pacman theme song (bass/ melody line).  Figured out the standard Arduino tone library uses PWM Timer1 exclusively.  It changes square wave frequencies by directly changing the frequency of the timer, and could therefore not play two at once.  Decided to change frequencies ourselves.. considerations about not putting it on robot for interfering with motors, therefore mounted piezo buzzers on controller.  Giant Arduino Tone library makes use of a c++ structure to manage plaing multiple tones at once.  The sheet music found (include in references) smallest note with 32nd note.  From lab 2(?) found that the onsets of the notes were heard more clearly with slight pauses between notes therefore there is a sixtyfourth pause between each note change.. to make the melody/ bass play in synch I broke it up into two arrays in such a way that they would go in synch..

-collision sensor-
Decided to use a collision sensor to detect if the robot ran into anything.  Justified this decision becasue of ultrasonic interference during lab time.  Got collision sensor component that reads high when triggered, has a built in potentiometer to adjust the trigger threshold.  After writing code to test and mounting to the arduino we discovered that the sensor was too sensitive for our purposes as it was triggered on the acceleration/ deceleration of the wheels. Considered using current spikes read from the motor shield as indication of collisions.

--miscellaneous design decisions--
Many smaller design decisions were made that when considered as a whole, made a noticible difference. For exampke, we used rechargeable NiMH batteries. NiMH batteries have a much longer lifespan than Alkaline batteries*. It saved the group money and a consistent amp-hour rating over Alakaline which contributed to a stable design.

We also practised clean cable management. We use tie-wraps where needed and installed a cable clip to the ceiling above the motors. This pulled the cables away from our encoders and gave us a more professional looking robot. For our temperature sensor we opted to use the separate breakout board for the LM35 versus the breadboard version. This ensured any heat from other components did not affect its reading.


Conclusions
-----------------
After blowing up some components, writing pieces of code, and testing continuously, we were able to build a robot with the desired specifications along with extra functionality. 


References and bibliography
--------------------------------------


Appendix A
----------------
Include the complete Arduino code (the pages that are used for this appendix are not counted towards the report length.) 


Appendix B
----------------
Include any other relevant info that does not fit in any other section in the report (the pages that are used for this appendix are not counted towards the report length.)
